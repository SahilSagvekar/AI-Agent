generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String?
  email               String                @unique
  password            String?
  role                Role?                 @default(USER)
  address             String?
  businessName        String?
  googleMapsUrl       String?
  phone               String?
  website             String?
  firstPayment        Boolean?
  isPaid              Boolean              @default(false)         // <-- Add: overall payment status
  planType            String?                                        // <-- Add: "newCustomer", "regular" etc
  laundromatLocations LaundromatLocation[]
  payments            Payment[]
  phoneNumbers        PhoneNumber[]
  createdAt  DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

model LaundromatLocation {
  id                Int                  @id @default(autoincrement())
  userId            Int
  locationName      String?
  businessName      String?
  address           String
  zipCode           String?
  phone             String
  email             String?
  website           String?
  googleMapsUrl     String?
  twilioPhone       String?
  notableLandmarks  String?
  attendingOpen    String?   // "09:00 AM"
  attendingClose   String?   // "06:00 PM"
  is24Hours        Boolean   @default(false)
  nonAttendingHours String?
  timeZone          String?               @default("UTC")
  escalateForwardCall Boolean @default(false)
  escalationNumber    String? 
  escalateSendMessage Boolean @default(false)
  escalateSendEmail   Boolean @default(false)
  escalationEmail     String?
  hiringResponse      String?
  amenities         Amenities?
  businessTone      BusinessTone?
  callHandling      CallHandling?
  languageSettings  LanguageSettings?
  machineInfo       MachineInfo?
  isPaid            Boolean              @default(false)
  operatingHours    OperatingHours?
  payments          Payment[]
  policies          Policies?
  pricing           Pricing?
  questions         Questions?
  services          Services?
  washers           Washer[]
  holidayHours      HolidayHours[] @relation("HolidayHoursToLocation")
  dryers            Dryer[]
  PhoneNumber       PhoneNumber[]          @relation("PhoneNumberToLocation")
  user              User                   @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model PhoneNumber {
  id                  Int                   @id @default(autoincrement())
  userId              Int
  number              String?                @unique
  assignedDate        DateTime?              @default(now())
  isPaid              Boolean?                 @default(false)
  status              String?
  user                User?                  @relation(fields: [userId], references: [id])
  LaundromatLocation  LaundromatLocation[]  @relation("PhoneNumberToLocation")
  createdAt  DateTime @default(now())
}

model OperatingHours {
  id                Int       @id @default(autoincrement())
  locationId        Int       @unique
  mondayOpen        String
  mondayClose       String
  tuesdayOpen       String
  tuesdayClose      String
  wednesdayOpen     String
  wednesdayClose    String
  thursdayOpen      String
  thursdayClose     String
  fridayOpen        String
  fridayClose       String
  saturdayOpen      String
  saturdayClose     String
  sundayOpen        String
  sundayClose       String
  openOnHolidays    Boolean
  holidayNote       String?
  lastWashTime      String?
  timeZone          String    @default("UTC")
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model HolidayHours {
  id                Int       @id @default(autoincrement())
  locationId        Int
  name              String
  open              String
  close             String
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id], name: "HolidayHoursToLocation")
  createdAt  DateTime @default(now())
}


model Washer {
  id            Int         @id @default(autoincrement())
  locationId    Int
  size          String
  price         String
  quantity      Int
  system        String
  payments      Json
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Dryer {
  id            Int         @id @default(autoincrement())
  locationId    Int
  size          String
  price         String
  quantity      Int
  system        String
  payments      Json
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Services {
  id                Int       @id @default(autoincrement())
  locationId        Int       @unique
  services          Json
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Pricing {
  id                   Int       @id @default(autoincrement())
  locationId           Int       @unique
  washerPrices         String
  dryerPrices          String
  washFoldRate         String?
  dryCleaningPrices    String?
  pickupDeliveryPricing String?
  minimumCharges       String?
  paymentMethods       Json
  laundromatLocation   LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model MachineInfo {
  id                  Int       @id @default(autoincrement())
  locationId          Int       @unique
  totalWashers        String
  totalDryers         String?
  machineOperationType String?
  machinesModern      Boolean
  largeMachines       Boolean
  laundromatLocation  LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Amenities {
  id                  Int       @id @default(autoincrement())
  locationId          Int       @unique
  amenities           Json
  laundromatLocation  LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Questions {
  id                  Int       @id @default(autoincrement())
  locationId          Int       @unique
  commonQuestions     Json
  customQuestions     Json
  laundromatLocation  LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model CallHandling {
  id                  Int       @id @default(autoincrement())
  locationId          Int       @unique
  callHandlingStyle   String
  forwardingEnabled   Boolean
  forwardingNumber    String?
  forwardingHours     String?
  laundromatLocation  LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model LanguageSettings {
  id                   Int       @id @default(autoincrement())
  locationId           Int       @unique
  languages            Json
  autoDetectLanguage   Boolean
  laundromatLocation   LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model BusinessTone {
  id                  Int       @id @default(autoincrement())
  locationId          Int       @unique
  businessTone        String
  customPhrases       String?
  businessIntro       String?
  laundromatLocation  LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Policies {
  id                  Int       @id @default(autoincrement())
  locationId          Int       @unique
  lostFoundPolicy     String?
  refundPolicy        String?
  petPolicies         String?
  timeLimits          String?
  unattendedPolicy    String?
  additionalPolicies  String?
  laundromatLocation  LaundromatLocation @relation(fields: [locationId], references: [id])
  createdAt  DateTime @default(now())
}

model Payment {
  id                       Int       @id @default(autoincrement())
  userId                   Int
  locationId               Int?
  amount                   Float
  paymentType              String    // "NEW_ACCOUNT_SUBSCRIPTION", "ADD_LOCATION", "NEW_NUMBER"
  formData                 Json?
  stripePaymentId          String?   @unique
  stripeSubscriptionId     String?   @unique
  paymentStatus            String
  locationCount            String
  locationNum              Int?
  paymentDate              DateTime  @default(now())
  laundromatLocation       LaundromatLocation? @relation(fields: [locationId], references: [id])
  user                     User      @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model appointments {
  id             Int       @id @default(autoincrement())
  customer_name  String    @db.VarChar(255)
  phone_number   String    @db.VarChar(20)
  address        String
  service_date   DateTime  @db.Date
  service_type   String?   @default("wash_and_fold") @db.VarChar(100)
  location_id    Int?      @default(1)
  status         String?   @default("scheduled") @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
}

model EmailOtp {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  otp        String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model Transcription {
  id        Int      @id @default(autoincrement())
  callSid   String   @unique
  text      String
  createdAt DateTime @default(now())
}

model CallLog {
  id           Int      @id @default(autoincrement())
  callSid      String   @unique
  fromNumber   String?
  toNumber     String?
  recordingUrl String?
  transcriptionText String?
  createdAt    DateTime @default(now())
}

  
