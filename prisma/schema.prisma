generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String?
  email               String               @unique
  password            String?
  address             String?
  businessName        String?
  googleMapsUrl       String?
  phone               String?
  website             String?
  firstPayment        Boolean?
  laundromatLocations LaundromatLocation[]
  payments            Payment[]
}

model LaundromatLocation {
  id               Int               @id @default(autoincrement())
  userId           Int
  locationName     String?
  address          String
  phone            String
  email            String?
  website          String?
  googleMapsUrl    String?
  businessName     String?
  areaCode         String?
  twilioPhone      String?
  // phoneNumbers     PhoneNumber[] @relation("PhoneNumberLocations")
  amenities        Amenities?
  businessTone     BusinessTone?
  callHandling     CallHandling?
  languageSettings LanguageSettings?
  user             User              @relation(fields: [userId], references: [id])
  machineInfo      MachineInfo?
  operatingHours   OperatingHours?
  payments         Payment[]
  policies         Policies?
  pricing          Pricing?
  questions        Questions?
  services         Services?
}

model OperatingHours {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  weekdayHours       String
  weekendHours       String?
  openOnHolidays     Boolean
  holidayNote        String?
  lastWashTime       String?
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model Services {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  services           Json
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model Pricing {
  id                    Int                @id @default(autoincrement())
  locationId            Int                @unique
  washerPrices          String
  dryerPrices           String
  washFoldRate          String?
  dryCleaningPrices     String?
  pickupDeliveryPricing String?
  minimumCharges        String?
  paymentMethods        Json
  laundromatLocation    LaundromatLocation @relation(fields: [locationId], references: [id])
}

model MachineInfo {
  id                   Int                @id @default(autoincrement())
  locationId           Int                @unique
  totalWashers         String
  totalDryers          String?
  machineOperationType String?
  machinesModern       Boolean
  largeMachines        Boolean
  laundromatLocation   LaundromatLocation @relation(fields: [locationId], references: [id])
}

model Amenities {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  amenities          Json
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model Questions {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  commonQuestions    Json
  customQuestions    Json
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model CallHandling {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  callHandlingStyle  String
  forwardingEnabled  Boolean
  forwardingNumber   String?
  forwardingHours    String?
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model LanguageSettings {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  languages          Json
  autoDetectLanguage Boolean
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model BusinessTone {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  businessTone       String
  customPhrases      String?
  businessIntro      String?
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model Policies {
  id                 Int                @id @default(autoincrement())
  locationId         Int                @unique
  lostFoundPolicy    String?
  refundPolicy       String?
  covidPolicies      String?
  timeLimits         String?
  unattendedPolicy   String?
  additionalPolicies String?
  laundromatLocation LaundromatLocation @relation(fields: [locationId], references: [id])
}

model Payment {
  id                 Int                 @id @default(autoincrement())
  userId             Int
  locationId         Int?
  amount             Float
  paymentType        String
  stripePaymentId    String?
  paymentStatus      String
  paymentDate        DateTime            @default(now())
  laundromatLocation LaundromatLocation? @relation(fields: [locationId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
}

// model PhoneNumber {
//   id            Int                  @id @default(autoincrement())
//   userId        Int                  // Owner user
//   number        String               @unique
//   assignedDate  DateTime             @default(now())
//   status        String               // e.g. 'active', 'pending', 'setup', etc.

//   user          User                 @relation(fields: [userId], references: [id])
//   locations     LaundromatLocation[] @relation("PhoneNumberLocations", references: [id])
// }

