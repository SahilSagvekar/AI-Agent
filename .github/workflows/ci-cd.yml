name: CI / CD to AWS Fargate

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-ai-agent
  CLUSTER_NAME: my-ecs-cluster-us
  SERVICE_NAME: my-ai-service-us
  TASK_FAMILY: my-ai-task
  CONTAINER_NAME: my-ai-agent-container


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: 20

    - run: npm ci --legacy-peer-deps
    - run: npm test --silent || true

    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push Docker image
      env:
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NINJAS_API_KEY: ${{ secrets.NINJAS_API_KEY }}
        STRIPE_ADD_LOCATION_PRICE_ID: ${{ secrets.STRIPE_ADD_LOCATION_PRICE_ID }}
        STRIPE_INTRO_PRICE_ID: ${{ secrets.STRIPE_INTRO_PRICE_ID }}
        STRIPE_NORMAL_PRICE_ID: ${{ secrets.STRIPE_NORMAL_PRICE_ID }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      run: |
        docker build \
          --build-arg STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY \
          --build-arg DATABASE_URL=$DATABASE_URL \
          --build-arg NINJAS_API_KEY=$NINJAS_API_KEY \
          --build-arg STRIPE_ADD_LOCATION_PRICE_ID=$STRIPE_ADD_LOCATION_PRICE_ID \
          --build-arg STRIPE_INTRO_PRICE_ID=$STRIPE_INTRO_PRICE_ID \
          --build-arg STRIPE_NORMAL_PRICE_ID=$STRIPE_NORMAL_PRICE_ID \
          --build-arg TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID \
          --build-arg TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN \
          -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Render ECS task definition
      env:
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NINJAS_API_KEY: ${{ secrets.NINJAS_API_KEY }}
        STRIPE_ADD_LOCATION_PRICE_ID: ${{ secrets.STRIPE_ADD_LOCATION_PRICE_ID }}
        STRIPE_INTRO_PRICE_ID: ${{ secrets.STRIPE_INTRO_PRICE_ID }}
        STRIPE_NORMAL_PRICE_ID: ${{ secrets.STRIPE_NORMAL_PRICE_ID }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      run: |
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        jq -n --arg img "$IMAGE_URI" \
              --arg stripe "$STRIPE_SECRET_KEY" \
              --arg db "$DATABASE_URL" \
              --arg ninja "$NINJAS_API_KEY" \
              --arg stripe_add "$STRIPE_ADD_LOCATION_PRICE_ID" \
              --arg stripe_intro "$STRIPE_INTRO_PRICE_ID" \
              --arg stripe_normal "$STRIPE_NORMAL_PRICE_ID" \
              --arg twilio_sid "$TWILIO_ACCOUNT_SID" \
              --arg twilio_auth "$TWILIO_AUTH_TOKEN" \
              '{
                family: "'"${{ env.TASK_FAMILY }}"'",
                networkMode: "awsvpc",
                requiresCompatibilities: ["FARGATE"],
                cpu: "512",
                memory: "1024",
                executionRoleArn: "arn:aws:iam::043309366307:role/ecsTaskExecutionRole",
                containerDefinitions: [
                  {
                    name: "'"${{ env.CONTAINER_NAME }}"'",
                    image: $img,
                    essential: true,
                    portMappings: [{ containerPort: 3000, hostPort: 3000, protocol: "tcp" }],
                    environment: [
                      {name: "STRIPE_SECRET_KEY", value: $stripe},
                      {name: "DATABASE_URL", value: $db},
                      {name: "NINJAS_API_KEY", value: $ninja},
                      {name: "STRIPE_ADD_LOCATION_PRICE_ID", value: $stripe_add},
                      {name: "STRIPE_INTRO_PRICE_ID", value: $stripe_intro},
                      {name: "STRIPE_NORMAL_PRICE_ID", value: $stripe_normal},
                      {name: "TWILIO_ACCOUNT_SID", value: $twilio_sid},
                      {name: "TWILIO_AUTH_TOKEN", value: $twilio_auth}
                    ],
                    logConfiguration: {
                      logDriver: "awslogs",
                      options: {
                        "awslogs-group": "/ecs/${{ env.SERVICE_NAME }}",
                        "awslogs-region": "${{ env.AWS_REGION }}",
                        "awslogs-stream-prefix": "ecs"
                      }
                    }
                  }
                ]
              }' > taskdef.json

    - run: aws ecs register-task-definition --cli-input-json file://taskdef.json

    - run: |
        aws ecs update-service \
          --cluster my-ecs-cluster-us \
          --service my-ai-service-us \
          --force-new-deployment
