name: CI/CD to EC2 with Versioned Docker Images

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-ai-agent
  EC2_HOST: 3.88.159.156
  EC2_USER: ec2-user
  DOCKER_CONTAINER_NAME: my-ai-agent
  AWS_ACCOUNT_ID: 043309366307

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Set Docker image tag (versioned)
      - name: Set IMAGE_TAG
        id: vars
        run: echo "IMAGE_TAG=main-${GITHUB_SHA::8}" >> $GITHUB_ENV

      # 5. Build and push Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      # 6. Cleanup old ECR images (keep last 5)
      - name: Cleanup old ECR images
        run: |
          aws ecr list-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'imageIds[*].imageTag' \
            --output text | tr '\t' '\n' | grep '^main-' | sort -r | tail -n +6 | while read tag; do
              echo "Deleting old image: $tag"
              aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=$tag
            done

      # 7. Setup SSH agent for EC2 access
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 8. Copy .env content to EC2
      - name: Copy .env to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "echo '${{ secrets.ENV_FILE_CONTENTS }}' > /home/${{ env.EC2_USER }}/my-app/.env"

      # 9. Deploy on EC2
      - name: Deploy on EC2
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            docker pull $IMAGE_URI
            docker stop ${{ env.DOCKER_CONTAINER_NAME }} || true
            docker rm ${{ env.DOCKER_CONTAINER_NAME }} || true
            docker run -d --restart unless-stopped -p 3000:3000 \
              --name ${{ env.DOCKER_CONTAINER_NAME }} \
              --env-file /home/${{ env.EC2_USER }}/my-app/.env \
              $IMAGE_URI
            "
